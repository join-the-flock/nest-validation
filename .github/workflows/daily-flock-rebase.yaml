# This workflow runs once per day and recreates the Flock master, beta, and
# stable branches with the latest history from Flutter.
#
# The Flock branches are reconstituted by taking the most recent history of
# Flutter's branches, and then replaying all of Flock's changes on top.
# This replay is effectively a rebase, but each change is saved in a patch
# file instead of the git log.

on:
  schedule:
    - cron: '0 12 * * *' # Once per day at noon
  workflow_dispatch: # on button click

# Update these variables to fit your custom fork configuration.
env:
  # The GitHub location of your Flutter fork.
  # WARNING: THIS WORKFLOW WILL DESTROY HISTORY IN THIS REPO!!
  FLOCK_REPO: "join-the-flock/flock-validation"

  # A Personal Access Token (PAT) so that this action can destroy and create
  # history in the `FLOCK_REPO`.
  GITHUB_PAT: ${{ secrets.REPO_WORKFLOW_PAT }}

name: daily-flock-rebase
permissions:
  contents: write

jobs:
  rebase-flock-on-flutter_master:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Nest (this repo)
        uses: actions/checkout@v4
        with:
          path: 'nest'
          fetch-depth: 0 # Checkout everything to get access to the tags
          repository: ${{github.repository}}
          ref: ${{github.event.pull_request.head.ref}}
          token: ${{ env.GITHUB_PAT }}

      - name: Checkout Flock
        uses: actions/checkout@v4
        with:
          path: 'nest/flock'
          fetch-depth: 0 # Checkout everything to get access to the tags
          repository: ${{ env.FLOCK_REPO }}
          ref: ${{ env.FLUTTER_BRANCH }}
          token: ${{ env.GITHUB_PAT }}

      - name: Fetch Flutter master
        working-directory: nest/flock
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

          # Setup upstream to Flutter and fetch the latest from master.
          git remote add upstream https://github.com/flutter/flutter.git
          git fetch upstream master

      - name: Delete master, recreate, replay Flock
        working-directory: nest/flock
        run: |
          # Checkout a temporary branch so we can manipulate master.
          git checkout -b temp

          # Delete master branch
          git branch -D master

          # Get fresh version from Flutter.
          git switch -c master upstream/master

          # Switch back to the refreshed master branch.
          git checkout master

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Apply Nest patches to Flock
        run: |
          echo "Apply patches..."
          cd nest
          ./tools/git-import-patches patches

      - name: Force push master branch to Flock
        working-directory: nest/flock
        run: |
          # Store the PAT in a file that can be accessed by the
          # GitHub CLI.
          echo "$GITHUB_PAT" > token.txt

          # Authorize GitHub CLI for the current repository and
          # create a pull-requests containing the updates.
          gh auth login --with-token < token.txt

          # Replace the previous Flock master branch with our updated branch.
          git push -f origin master
  
  rebase-flock-on-flutter_beta:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Nest
        uses: actions/checkout@v4
        with:
          path: 'nest'
          fetch-depth: 0 # Checkout everything to get access to the tags
          repository: ${{github.repository}}
          # ref: ${{github.event.pull_request.head.ref}}
          ref: beta
          token: ${{ env.GITHUB_PAT }}

      - name: Checkout Flock
        uses: actions/checkout@v4
        with:
          path: 'nest/flock'
          fetch-depth: 0 # Checkout everything to get access to the tags
          repository: ${{ env.FLOCK_REPO }}
          # ref: ${{ env.FLUTTER_BRANCH }}
          ref: beta
          token: ${{ env.GITHUB_PAT }}

      - name: Fetch Flutter beta
        working-directory: nest/flock
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

          # Setup upstream to Flutter and fetch the latest from beta.
          git remote add upstream https://github.com/flutter/flutter.git
          git fetch upstream beta
      
      - name: Lookup beta tag
        working-directory: nest/flock
        run: |
          beta_commit=$(git ls-remote upstream refs/heads/beta | awk '{print $1}')
          tag=$(git ls-remote --tags upstream | grep "$beta_commit" | awk -F'/' '{print $NF}')
          
          echo "Beta tag: $TAG"
          echo "tag=$tag" >> $GITHUB_ENV

      - name: Delete beta, recreate, replay Flock
        working-directory: nest/flock
        run: |
          # Checkout a temporary branch so we can manipulate beta.
          git checkout -b temp

          # Delete beta branch
          git branch -D beta

          # Get fresh version from Flutter.
          git switch -c beta upstream/beta

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Apply Nest patches to Flock
        run: |
          echo "Apply patches..."
          cd nest
          ./tools/git-import-patches patches

      - name: Apply current beta tag to Flock
        working-directory: nest/flock
        run: |
          echo "Tagging latest beta commit (${{ env.tag }})..."
          git tag -f -a ${{ env.tag }} -m "Flock ${{ env.tag }}"

      - name: Force push beta branch to Flock
        working-directory: nest/flock
        run: |
          # Store the PAT in a file that can be accessed by the
          # GitHub CLI.
          echo "$GITHUB_PAT" > token.txt

          # Authorize GitHub CLI for the current repository and
          # create a pull-requests containing the updates.
          gh auth login --with-token < token.txt

          # Replace the previous Flock beta branch with the updated one.
          git push -f origin beta
          git push -f origin ${{ env.tag }}

  rebase-flock-on-flutter_stable:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Nest
        uses: actions/checkout@v4
        with:
          path: 'nest'
          fetch-depth: 0 # Checkout everything to get access to the tags
          repository: ${{github.repository}}
          # ref: ${{github.event.pull_request.head.ref}}
          ref: stable
          token: ${{ env.GITHUB_PAT }}

      - name: Checkout Flock
        uses: actions/checkout@v4
        with:
          path: 'nest/flock'
          fetch-depth: 0 # Checkout everything to get access to the tags
          repository: ${{ env.FLOCK_REPO }}
          # ref: ${{ env.FLUTTER_BRANCH }}
          ref: stable
          token: ${{ env.GITHUB_PAT }}

      - name: Fetch Flutter stable
        working-directory: nest/flock
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

          # Setup upstream to Flutter and fetch the latest from stable.
          git remote add upstream https://github.com/flutter/flutter.git
          git fetch upstream stable
      
      - name: Lookup stable tag
        working-directory: nest/flock
        run: |
          stable_commit=$(git ls-remote upstream refs/heads/stable | awk '{print $1}')
          tag=$(git ls-remote --tags upstream | grep "$stable_commit" | awk -F'/' '{print $NF}')
          
          echo "Stable tag: $TAG"
          echo "tag=$tag" >> $GITHUB_ENV

      - name: Delete stable, recreate, replay Flock
        working-directory: nest/flock
        run: |
          # Checkout a temporary branch so we can manipulate stable.
          git checkout -b temp

          # Delete stable branch
          git branch -D stable

          # Get fresh version from Flutter.
          git switch -c stable upstream/stable

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Apply Nest patches to Flock
        run: |
          echo "Apply patches..."
          cd nest
          ./tools/git-import-patches patches

      - name: Apply current stable tag to Flock
        working-directory: nest/flock
        run: |
          echo "Tagging latest stable commit (${{ env.tag }})..."
          git tag -f -a ${{ env.tag }} -m "Flock ${{ env.tag }}"

      - name: Force push stable branch to Flock
        working-directory: nest/flock
        run: |
          # Store the PAT in a file that can be accessed by the
          # GitHub CLI.
          echo "$GITHUB_PAT" > token.txt

          # Authorize GitHub CLI for the current repository and
          # create a pull-requests containing the updates.
          gh auth login --with-token < token.txt

          # Replace the previous Flock stable branch with the updated one.
          git push -f origin stable
          git push -f origin ${{ env.tag }}
