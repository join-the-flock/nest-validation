# This workflow looks for changes to Flock patches within Nest, and then
# creates or updates a parallel PR in the Flock repository.
#
# Nest accumulates changes to Flutter in the form of patch files. These patch
# files are plaid on top of Flutter to create a version called Flock. Reviewing
# patch files in isolation is counterproductive, because developers can't see
# any of the code around the changes. This workflow plays back the patches in
# Nest and generates a PR against Flock showing the actual diff caused by
# those patches.
#
# If a PR is submitted to Nest without any changes to patches, then this
# workflow does nothing.
#
# After this workflow runs, go to github.com/join-the-flock/flock and locate
# the new PR with the Flutter diff. Review the changes there. When satisfied
# with the changes, close the PR in Flock, and merge the PR in Nest.

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

name: create-and-update-flock-pr-from-nest-patch
permissions:
  contents: write

jobs:
  create-and-update-flock-pr-from-nest-patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Nest
        uses: actions/checkout@v4
        with:
          path: 'nest'
          fetch-depth: 0 # Checkout everything to get access to the tags
          repository: ${{github.repository}}
          ref: ${{github.event.pull_request.head.ref}}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Look for Flock patch changes
        run: |
          cd nest
          git fetch origin ${{ github.base_ref }}
          if git diff --quiet origin/${{ github.base_ref }}...HEAD -- patches/; then
            echo "No changes to Flock patches. Exiting workflow."
            echo "has_patch_changes=false" >> $GITHUB_ENV
          else
            echo "This PR includes Flock patch changes. Creating Flock PR for review."
            echo "has_patch_changes=true" >> $GITHUB_ENV
          fi

      - name: Checkout Flock
        if: env.has_patch_changes == 'true'
        uses: actions/checkout@v4
        with:
          path: 'nest/flock'
          fetch-depth: 0 # Checkout everything to get access to the tags
          repository: 'join-the-flock/flock'
          ref: 'master'
          token: ${{ secrets.REPO_WORKFLOW_PAT }}

      - name: Create branch for Flock PR
        if: env.has_patch_changes == 'true'
        working-directory: nest/flock
        run: |
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

          git checkout -b ${{github.event.pull_request.head.ref}}

      - name: Setup Python
        if: env.has_patch_changes == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Apply Nest patches to Flock
        if: env.has_patch_changes == 'true'
        run: |
          echo "Apply patches..."
          cd nest
          python -u tools/git-import-patches.py patches

      - name: Push Flock changes to Flock repo for PR
        if: env.has_patch_changes == 'true'
        working-directory: nest/flock
        run: |
          # Store the PAT in a file that can be accessed by the
          # GitHub CLI.
          echo "${{ secrets.REPO_WORKFLOW_PAT }}" > token.txt

          # Authorize GitHub CLI for the current repository and
          # create a pull-requests containing the updates.
          gh auth login --with-token < token.txt

          pr_exists=$(gh pr list --state open --base main --head ${{github.event.pull_request.head.ref}} --repo ${{github.repository}} --json number --jq '.[0].number')

          # If a PR exists, inform the user. Otherwise, create a new PR.
          if [ -n "$pr_exists" ]; then
            # Force push to the existing PR branch.
            git push -f origin ${{github.event.pull_request.head.ref}}

            echo "Flock PR already exists, and it was updated with a force push."
          else
            echo "Flock PR doesn't exist yet. Creating it."

            # Save the PR description to a file so that we can insert newlines.
            echo -e "${{ github.event.pull_request.body }}\n\n---\n\nThis Flock PR is derived from the patch in the following Nest PR: \n${{ github.event.pull_request.url }}" > pr_description.txt

            # Create the PR.
            gh pr create \
              --title "${{ github.event.pull_request.title }}" \
              --body-file "pr_description.txt" \
              --head "${{ github.event.pull_request.head.ref }}" \
              --base "master"
          fi
